from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QPushButton, QLabel, QLineEdit, QSlider, QCheckBox, QRadioButton,
                             QGroupBox, QFormLayout, QGridLayout, QSizePolicy, QStatusBar,
                             QMessageBox, QButtonGroup, QScrollArea, QComboBox, QInputDialog,
                             QListWidget, QListWidgetItem, QSplitter, QFileDialog)
from PyQt6.QtCore import Qt

from canvas import MatplotlibCanvas
from constants import *

class UISetupMixin:
    """Mixin class providing UI setup methods for SubwooferSimApp."""
    def _setup_ui(self):
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        
        main_container_layout = QHBoxLayout(self.central_widget)
        splitter = QSplitter(Qt.Orientation.Horizontal)
        main_container_layout.addWidget(splitter)
        
        controls_scroll_area = QScrollArea()
        controls_scroll_area.setWidgetResizable(True)
        controls_widget = QWidget()
        self.controls_layout = QVBoxLayout(controls_widget)
        controls_scroll_area.setWidget(controls_widget)
        
        splitter.addWidget(controls_scroll_area)
        
        self.plot_canvas = MatplotlibCanvas(self)
        self.ax = self.plot_canvas.axes
        splitter.addWidget(self.plot_canvas)

        splitter.setSizes([450, 1150])

        group_box_style = """
        QGroupBox {
            border: 2px solid gray;
            border-radius: 5px;
            margin-top: 1ex; /* leave space at the top for the title */
            font-weight: bold;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            subcontrol-position: top center; /* position at the top center */
            padding: 0 3px;
            color: lightgray;
        }
        """
        self.central_widget.setStyleSheet(group_box_style)


        self._setup_project_ui()
        self._setup_stanza_ui()
        self._setup_global_sub_ui()
        self._setup_sub_config_ui()
        self._setup_group_array_ui() # Nuova sezione unificata
        self._setup_target_areas_ui()
        self._setup_avoidance_areas_ui()
        self._setup_spl_vis_ui()
        self._setup_sim_grid_ui()
        self._setup_optimization_ui()
        
        self.controls_layout.addStretch(1)
        
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("Applicazione caricata.")
        self.plot_canvas.canvas.mpl_connect('button_press_event', self.on_press_mpl)
        self.plot_canvas.canvas.mpl_connect('motion_notify_event', self.on_motion_mpl)
        self.plot_canvas.canvas.mpl_connect('button_release_event', self.on_release_mpl)
        self.plot_canvas.canvas.mpl_connect('motion_notify_event', self.on_mouse_move_for_spl_display)


    def _setup_project_ui(self):
        project_group = QGroupBox("Progetto")
        project_layout = QHBoxLayout()
        
        self.btn_save_project = QPushButton("Salva Progetto")
        self.btn_save_project.clicked.connect(self.save_project_to_excel)
        project_layout.addWidget(self.btn_save_project)
        
        self.btn_load_project = QPushButton("Carica Progetto")
        self.btn_load_project.clicked.connect(self.load_project_from_excel)
        project_layout.addWidget(self.btn_load_project)
        
        project_group.setLayout(project_layout)
        self.controls_layout.addWidget(project_group)
        
    def _setup_stanza_ui(self):
        stanza_group = QGroupBox("Configurazione Stanza")
        stanza_layout = QFormLayout()
        self.btn_add_vtx = QPushButton("Aggiungi Vertice Stanza")
        self.btn_add_vtx.clicked.connect(self.add_stanza_vtx)
        stanza_layout.addRow(self.btn_add_vtx)
        self.btn_rem_vtx = QPushButton("Rimuovi Ultimo Vertice")
        self.btn_rem_vtx.clicked.connect(self.remove_stanza_vtx)
        stanza_layout.addRow(self.btn_rem_vtx)
        self.selected_vtx_label = QLabel("Nessun Vertice Selezionato")
        stanza_layout.addRow(self.selected_vtx_label)
        self.tb_stanza_vtx_x = QLineEdit()
        self.tb_stanza_vtx_x.setEnabled(False)
        stanza_layout.addRow("Vertice X:", self.tb_stanza_vtx_x)
        self.tb_stanza_vtx_y = QLineEdit()
        self.tb_stanza_vtx_y.setEnabled(False)
        stanza_layout.addRow("Vertice Y:", self.tb_stanza_vtx_y)
        self.btn_update_stanza_vtx = QPushButton("Aggiorna Vertice")
        self.btn_update_stanza_vtx.setEnabled(False)
        self.btn_update_stanza_vtx.clicked.connect(self.on_update_selected_stanza_vertex)
        stanza_layout.addRow(self.btn_update_stanza_vtx)
        self.error_text_stanza_vtx_edit = QLabel("")
        self.error_text_stanza_vtx_edit.setStyleSheet("color: red;")
        stanza_layout.addRow(self.error_text_stanza_vtx_edit)
        stanza_group.setLayout(stanza_layout)
        self.controls_layout.addWidget(stanza_group)

    def _setup_global_sub_ui(self):
        global_settings_group = QGroupBox("Impostazioni Globali Subwoofer")
        global_settings_layout = QFormLayout()
        self.tb_global_sub_width = QLineEdit(str(self.global_sub_width))
        global_settings_layout.addRow("Larghezza Sub (m):", self.tb_global_sub_width)
        self.tb_global_sub_depth = QLineEdit(str(self.global_sub_depth))
        global_settings_layout.addRow("Profondità Sub (m):", self.tb_global_sub_depth)
        self.tb_global_sub_spl = QLineEdit(str(self.global_sub_spl_rms))
        global_settings_layout.addRow("SPL RMS Globale (dB):", self.tb_global_sub_spl)
        self.check_use_global_for_new = QCheckBox("Usa per Nuovi Sub Manuali")
        self.check_use_global_for_new.toggled.connect(self.on_toggle_use_global_for_new)
        global_settings_layout.addRow(self.check_use_global_for_new)
        self.btn_apply_globals_to_all = QPushButton("Applica Globali a Tutti i Sub")
        self.btn_apply_globals_to_all.clicked.connect(self.apply_global_settings_to_all_subs)
        global_settings_layout.addRow(self.btn_apply_globals_to_all)
        self.error_text_global_settings = QLabel("")
        self.error_text_global_settings.setStyleSheet("color: red;")
        global_settings_layout.addRow(self.error_text_global_settings)
        global_settings_group.setLayout(global_settings_layout)
        self.controls_layout.addWidget(global_settings_group)
        
    def _setup_sub_config_ui(self):
        sub_group = QGroupBox("Configurazione Subwoofer")
        sub_layout_main = QVBoxLayout()
        sub_selector_layout = QHBoxLayout()
        self.btn_prev_sub = QPushButton("<")
        self.btn_prev_sub.clicked.connect(self.select_prev_sub)
        sub_selector_layout.addWidget(self.btn_prev_sub)
        self.sub_selector_text_widget = QLabel("Nessun Sub")
        sub_selector_layout.addWidget(self.sub_selector_text_widget, 1, alignment=Qt.AlignmentFlag.AlignCenter)
        self.btn_next_sub = QPushButton(">")
        self.btn_next_sub.clicked.connect(self.select_next_sub)
        sub_selector_layout.addWidget(self.btn_next_sub)
        sub_layout_main.addLayout(sub_selector_layout)
        sub_actions_layout = QHBoxLayout()
        self.btn_add_sub = QPushButton("Aggiungi Sub")
        self.btn_add_sub.clicked.connect(self.add_subwoofer)
        sub_actions_layout.addWidget(self.btn_add_sub)
        self.btn_rem_sub = QPushButton("Rimuovi Sub Corrente")
        self.btn_rem_sub.clicked.connect(self.remove_subwoofer)
        sub_actions_layout.addWidget(self.btn_rem_sub)
        sub_layout_main.addLayout(sub_actions_layout)
        sub_params_layout = QFormLayout()
        
        self.sub_pos_label = QLabel("X/Y Sub (m):")
        self.tb_sub_x = QLineEdit()
        self.tb_sub_y = QLineEdit()
        pos_layout = QHBoxLayout()
        pos_layout.addWidget(self.tb_sub_x)
        pos_layout.addWidget(self.tb_sub_y)
        sub_params_layout.addRow(self.sub_pos_label, pos_layout)
        
        self.tb_sub_angle = QLineEdit()
        sub_params_layout.addRow("Angolo (°):", self.tb_sub_angle)
        
        self.sub_gain_label = QLabel("Trim Gain (dB):")
        self.tb_sub_gain_db = QLineEdit()
        sub_params_layout.addRow(self.sub_gain_label, self.tb_sub_gain_db)
        
        self.sub_delay_label = QLabel("Delay (ms):")
        self.tb_sub_delay = QLineEdit()
        sub_params_layout.addRow(self.sub_delay_label, self.tb_sub_delay)
        
        self.sub_polarity_label = QLabel("Polarità (+1/-1):")
        self.tb_sub_polarity = QLineEdit()
        sub_params_layout.addRow(self.sub_polarity_label, self.tb_sub_polarity)
        
        self.check_sub_angle_lock = QCheckBox("Blocca Angolo")
        self.check_sub_angle_lock.setObjectName("angle")
        self.check_sub_angle_lock.toggled.connect(self.on_toggle_param_lock)
        sub_params_layout.addRow(self.check_sub_angle_lock)
        self.check_sub_delay_lock = QCheckBox("Blocca Delay")
        self.check_sub_delay_lock.setObjectName("delay")
        self.check_sub_delay_lock.toggled.connect(self.on_toggle_param_lock)
        sub_params_layout.addRow(self.check_sub_delay_lock)
        self.check_sub_gain_lock = QCheckBox("Blocca Gain")
        self.check_sub_gain_lock.setObjectName("gain")
        self.check_sub_gain_lock.toggled.connect(self.on_toggle_param_lock)
        sub_params_layout.addRow(self.check_sub_gain_lock)
        self.check_sub_polarity_lock = QCheckBox("Blocca Polarità")
        self.check_sub_polarity_lock.setObjectName("polarity")
        self.check_sub_polarity_lock.toggled.connect(self.on_toggle_param_lock)
        sub_params_layout.addRow(self.check_sub_polarity_lock)
        self.tb_sub_width = QLineEdit()
        sub_params_layout.addRow("Larghezza Sub (m):", self.tb_sub_width)
        self.tb_sub_depth = QLineEdit()
        sub_params_layout.addRow("Profondità Sub (m):", self.tb_sub_depth)
        self.tb_sub_spl_rms = QLineEdit()
        sub_params_layout.addRow("SPL RMS @ 1m (dB):", self.tb_sub_spl_rms)

        self.btn_submit_sub_params = QPushButton("Applica Parametri")
        self.btn_submit_sub_params.clicked.connect(self.on_submit_sub_param_qt)
        sub_params_layout.addRow(self.btn_submit_sub_params)
        self.error_text_sub = QLabel("")
        self.error_text_sub.setStyleSheet("color: red;")
        sub_params_layout.addRow(self.error_text_sub)
        sub_layout_main.addLayout(sub_params_layout)
        sub_group.setLayout(sub_layout_main)
        self.controls_layout.addWidget(sub_group)
        
    def _setup_group_array_ui(self): # Nuova sezione unificata
        group_array_group = QGroupBox("Gestione Gruppi e Array")
        group_array_layout = QVBoxLayout()

        # Raggruppamento Subwoofer (spostato e adattato)
        grouping_sub_group_box = QGroupBox("Raggruppamento Manuale")
        grouping_sub_layout = QVBoxLayout()
        group_action_buttons_layout = QHBoxLayout()
        self.btn_create_new_group = QPushButton("Crea Nuovo Gruppo")
        self.btn_create_new_group.clicked.connect(self.create_new_group)
        group_action_buttons_layout.addWidget(self.btn_create_new_group)
        self.btn_add_to_group = QPushButton("Aggiungi a Gruppo")
        self.btn_add_to_group.clicked.connect(self.add_sub_to_existing_group)
        group_action_buttons_layout.addWidget(self.btn_add_to_group)
        grouping_sub_layout.addLayout(group_action_buttons_layout)
        group_action_buttons_layout2 = QHBoxLayout()
        self.btn_remove_from_group = QPushButton("Rimuovi da Gruppo")
        self.btn_remove_from_group.clicked.connect(self.remove_sub_from_group)
        group_action_buttons_layout2.addWidget(self.btn_remove_from_group)
        self.btn_ungroup_all = QPushButton("Sciogli Gruppo")
        self.btn_ungroup_all.clicked.connect(self.ungroup_selected_sub_group)
        group_action_buttons_layout2.addWidget(self.btn_ungroup_all)
        grouping_sub_layout.addLayout(group_action_buttons_layout2)
        self.group_status_label = QLabel("Sub selezionato: Nessun Gruppo")
        grouping_sub_layout.addWidget(self.group_status_label)
        self.error_text_grouping = QLabel("")
        self.error_text_grouping.setStyleSheet("color: red;")
        grouping_sub_layout.addWidget(self.error_text_grouping)
        self.group_details_label = QLabel("Valori Assoluti Membri del Gruppo:")
        self.group_details_label.setVisible(False) # Nascosto di default
        grouping_sub_layout.addWidget(self.group_details_label)

        self.group_members_list = QListWidget()
        self.group_members_list.setMaximumHeight(120) # Limitiamo l'altezza
        self.group_members_list.setVisible(False) # Nascosto di default
        grouping_sub_layout.addWidget(self.group_members_list)
        grouping_sub_group_box.setLayout(grouping_sub_layout)
        group_array_layout.addWidget(grouping_sub_group_box)

        # Creazione Array (spostato e adattato)
        array_setup_group_box = QGroupBox("Configurazione Array")
        self.array_setup_layout_form = QFormLayout()
        self.array_type_combo = QComboBox()
        self.array_type_combo.addItems(["Nessuno", "Coppia Cardioide (2 sub)", "Array End-Fire", "Array Lineare (Steering Elettrico)", "Array Vortex"])
        self.array_type_combo.currentIndexChanged.connect(self.on_array_type_change)
        self.array_setup_layout_form.addRow("Tipo di Array:", self.array_type_combo)
        self.array_freq_label = QLabel("Freq. Array Design (Hz):")
        self.array_freq_input = QLineEdit(str(DEFAULT_ARRAY_FREQ))
        self.array_setup_layout_form.addRow(self.array_freq_label, self.array_freq_input)
        self.array_auto_spacing_check = QCheckBox("Calcola Spaziatura/Raggio da Frequenza")
        self.array_auto_spacing_check.toggled.connect(self.on_auto_spacing_toggle)
        self.array_setup_layout_form.addRow(self.array_auto_spacing_check)
        self.array_wavelength_fraction_label = QLabel("Frazione λ per Spaziatura:")
        self.array_wavelength_fraction_combo = QComboBox()
        self.array_wavelength_fraction_combo.addItems(["λ/4", "λ/2"])
        self.array_setup_layout_form.addRow(self.array_wavelength_fraction_label, self.array_wavelength_fraction_combo)
        self.array_spacing_label = QLabel("Spaziatura/Raggio (m):")
        self.array_spacing_input = QLineEdit(str(DEFAULT_ARRAY_RADIUS))
        self.array_setup_layout_form.addRow(self.array_spacing_label, self.array_spacing_input)
        self.array_elements_label = QLabel("Numero Elementi:")
        self.array_elements_input = QLineEdit("4")
        self.array_setup_layout_form.addRow(self.array_elements_label, self.array_elements_input)
        self.array_start_angle_label = QLabel("Orientamento/Angolo (°):")
        self.array_start_angle_input = QLineEdit(str(DEFAULT_ARRAY_START_ANGLE_DEG))
        self.array_setup_layout_form.addRow(self.array_start_angle_label, self.array_start_angle_input)
        self.array_line_coverage_angle_label = QLabel("Angolo Copertura (°):")
        self.array_line_coverage_angle_input = QLineEdit(str(DEFAULT_LINE_ARRAY_COVERAGE_DEG))
        self.array_setup_layout_form.addRow(self.array_line_coverage_angle_label, self.array_line_coverage_angle_input)
        self.array_line_steering_angle_label = QLabel("Angolo Steering (°):")
        self.array_line_steering_angle_input = QLineEdit(str(DEFAULT_LINE_ARRAY_STEERING_DEG))
        self.array_setup_layout_form.addRow(self.array_line_steering_angle_label, self.array_line_steering_angle_input)
        self.array_vortex_mode_label = QLabel("Modalità Vortex:")
        self.array_vortex_mode_label.setToolTip("Numero intero (es. 1, 2, -1) che definisce l'avvolgimento dell'onda sonora.\nValori più alti creano un 'nullo' di pressione più ampio al centro.")
        self.array_vortex_mode_input = QLineEdit(str(DEFAULT_VORTEX_MODE))
        self.array_setup_layout_form.addRow(self.array_vortex_mode_label, self.array_vortex_mode_input)
        self.array_vortex_steering_angle_label = QLabel("Angolo Steering Vortex (°):")
        self.array_vortex_steering_angle_input = QLineEdit(str(DEFAULT_VORTEX_STEERING_DEG))
        self.array_setup_layout_form.addRow(self.array_vortex_steering_angle_label, self.array_vortex_steering_angle_input)

        self.apply_array_config_button = QPushButton("Crea Gruppo Array")
        self.apply_array_config_button.clicked.connect(self.apply_array_configuration)
        self.array_setup_layout_form.addRow(self.apply_array_config_button)
        self.array_info_label = QLabel()
        self.array_info_label.setWordWrap(True)
        self.array_setup_layout_form.addRow(self.array_info_label)
        self.error_text_array_params = QLabel("")
        self.error_text_array_params.setStyleSheet("color: red;")
        self.array_setup_layout_form.addRow(self.error_text_array_params)
        array_setup_group_box.setLayout(self.array_setup_layout_form)
        group_array_layout.addWidget(array_setup_group_box)

        group_array_group.setLayout(group_array_layout)
        self.controls_layout.addWidget(group_array_group)
        
    def _setup_target_areas_ui(self):
        targets_group = QGroupBox("Aree Target")
        targets_main_layout = QVBoxLayout()
        target_selector_layout = QHBoxLayout()
        self.btn_prev_target_area = QPushButton("<")
        self.btn_prev_target_area.clicked.connect(self.select_prev_target_area)
        target_selector_layout.addWidget(self.btn_prev_target_area)
        self.label_current_target_area = QLabel("Nessuna Area")
        target_selector_layout.addWidget(self.label_current_target_area, 1, Qt.AlignmentFlag.AlignCenter)
        self.btn_next_target_area = QPushButton(">")
        self.btn_next_target_area.clicked.connect(self.select_next_target_area)
        target_selector_layout.addWidget(self.btn_next_target_area)
        targets_main_layout.addLayout(target_selector_layout)
        target_actions_layout = QHBoxLayout()
        self.btn_new_target_area = QPushButton("Nuova")
        self.btn_new_target_area.clicked.connect(self.add_new_target_area_ui)
        target_actions_layout.addWidget(self.btn_new_target_area)
        self.btn_remove_selected_target_area = QPushButton("Rimuovi")
        self.btn_remove_selected_target_area.clicked.connect(self.remove_selected_target_area_ui)
        target_actions_layout.addWidget(self.btn_remove_selected_target_area)
        targets_main_layout.addLayout(target_actions_layout)
        self.check_activate_selected_target_area = QCheckBox("Attiva Area")
        self.check_activate_selected_target_area.toggled.connect(self.toggle_selected_target_area_active)
        targets_main_layout.addWidget(self.check_activate_selected_target_area)

        self.btn_add_target_vtx = QPushButton("Aggiungi Vertice a Area Target")
        self.btn_add_target_vtx.clicked.connect(self._add_vtx_to_current_target_area)
        targets_main_layout.addWidget(self.btn_add_target_vtx)

        self.target_vtx_list_widget = QListWidget()
        self.target_vtx_list_widget.currentItemChanged.connect(self.on_target_vtx_selection_change)
        self.target_vtx_list_widget.setMaximumHeight(100)
        targets_main_layout.addWidget(self.target_vtx_list_widget)
        
        vtx_edit_layout = QFormLayout()
        self.tb_target_vtx_x = QLineEdit()
        vtx_edit_layout.addRow("Vertice X:", self.tb_target_vtx_x)
        self.tb_target_vtx_y = QLineEdit()
        vtx_edit_layout.addRow("Vertice Y:", self.tb_target_vtx_y)
        self.btn_update_target_vtx = QPushButton("Aggiorna Vertice Target")
        self.btn_update_target_vtx.clicked.connect(self.on_update_selected_target_vertex)
        targets_main_layout.addLayout(vtx_edit_layout)
        targets_main_layout.addWidget(self.btn_update_target_vtx)

        self.error_text_target_area_mgmt = QLabel("")
        self.error_text_target_area_mgmt.setStyleSheet("color: orange;")
        targets_main_layout.addWidget(self.error_text_target_area_mgmt)
        targets_group.setLayout(targets_main_layout)
        self.controls_layout.addWidget(targets_group)
        
    def _setup_avoidance_areas_ui(self):
        avoid_group = QGroupBox("Aree di Evitamento")
        avoid_main_layout = QVBoxLayout()
        avoid_selector_layout = QHBoxLayout()
        self.btn_prev_avoid_area = QPushButton("<")
        self.btn_prev_avoid_area.clicked.connect(self.select_prev_avoidance_area)
        avoid_selector_layout.addWidget(self.btn_prev_avoid_area)
        self.label_current_avoid_area = QLabel("Nessuna Area")
        avoid_selector_layout.addWidget(self.label_current_avoid_area, 1, Qt.AlignmentFlag.AlignCenter)
        self.btn_next_avoid_area = QPushButton(">")
        self.btn_next_avoid_area.clicked.connect(self.select_next_avoidance_area)
        avoid_selector_layout.addWidget(self.btn_next_avoid_area)
        avoid_main_layout.addLayout(avoid_selector_layout)
        avoid_actions_layout = QHBoxLayout()
        self.btn_new_avoid_area = QPushButton("Nuova")
        self.btn_new_avoid_area.clicked.connect(self.add_new_avoidance_area_ui)
        avoid_actions_layout.addWidget(self.btn_new_avoid_area)
        self.btn_remove_selected_avoid_area = QPushButton("Rimuovi")
        self.btn_remove_selected_avoid_area.clicked.connect(self.remove_selected_avoidance_area_ui)
        avoid_actions_layout.addWidget(self.btn_remove_selected_avoid_area)
        avoid_main_layout.addLayout(avoid_actions_layout)
        self.check_activate_selected_avoid_area = QCheckBox("Attiva Area")
        self.check_activate_selected_avoid_area.toggled.connect(self.toggle_selected_avoidance_area_active)
        avoid_main_layout.addWidget(self.check_activate_selected_avoid_area) # Corrected typo here

        self.btn_add_avoid_vtx = QPushButton("Aggiungi Vertice a Area Evitamento")
        self.btn_add_avoid_vtx.clicked.connect(self._add_vtx_to_current_avoidance_area)
        avoid_main_layout.addWidget(self.btn_add_avoid_vtx)

        self.avoid_vtx_list_widget = QListWidget()
        self.avoid_vtx_list_widget.currentItemChanged.connect(self.on_avoid_vtx_selection_change)
        self.avoid_vtx_list_widget.setMaximumHeight(100)
        avoid_main_layout.addWidget(self.avoid_vtx_list_widget)

        vtx_edit_layout = QFormLayout()
        self.tb_avoid_vtx_x = QLineEdit()
        vtx_edit_layout.addRow("Vertice X:", self.tb_avoid_vtx_x)
        self.tb_avoid_vtx_y = QLineEdit()
        vtx_edit_layout.addRow("Vertice Y:", self.tb_avoid_vtx_y)
        self.btn_update_avoid_vtx = QPushButton("Aggiorna Vertice Avoid")
        self.btn_update_avoid_vtx.clicked.connect(self.on_update_selected_avoid_vertex)
        avoid_main_layout.addLayout(vtx_edit_layout)
        avoid_main_layout.addWidget(self.btn_update_avoid_vtx)

        self.error_text_avoid_area_mgmt = QLabel("")
        self.error_text_avoid_area_mgmt.setStyleSheet("color: orange;")
        avoid_main_layout.addWidget(self.error_text_avoid_area_mgmt)
        avoid_group.setLayout(avoid_main_layout)
        self.controls_layout.addWidget(avoid_group)

    def _setup_spl_vis_ui(self):
        spl_vis_group = QGroupBox("Visualizzazione SPL")
        spl_vis_layout = QFormLayout()
        self.slider_freq = QSlider(Qt.Orientation.Horizontal)
        self.slider_freq.setMinimum(20)
        self.slider_freq.setMaximum(200)
        self.slider_freq.setValue(80)
        self.slider_freq.valueChanged.connect(self.on_freq_change_ui_qt)
        spl_vis_layout.addRow("Freq. Visualiz.:", self.slider_freq)
        self.label_slider_freq_val = QLabel(f"{self.slider_freq.value()} Hz")
        spl_vis_layout.addRow(self.label_slider_freq_val)
        self.tb_spl_min = QLineEdit("50")
        self.tb_spl_max = QLineEdit("100")
        spl_vis_layout.addRow("SPL Min Display (dB):", self.tb_spl_min)
        spl_vis_layout.addRow("SPL Max Display (dB):", self.tb_spl_max)
        self.error_text_spl_range = QLabel("")
        self.error_text_spl_range.setStyleSheet("color: red;")
        spl_vis_layout.addRow(self.error_text_spl_range)
        self.check_auto_spl_update = QCheckBox("Aggiorna SPL Automaticamente")
        self.check_auto_spl_update.setChecked(True)
        spl_vis_layout.addRow(self.check_auto_spl_update)
        self.btn_update_spl = QPushButton("Aggiorna Mappa SPL")
        self.btn_update_spl.clicked.connect(lambda: self.visualizza_mappatura_spl(self.get_slider_freq_val(), preserve_view=True))
        spl_vis_layout.addRow(self.btn_update_spl)
        spl_vis_group.setLayout(spl_vis_layout)
        self.controls_layout.addWidget(spl_vis_group)
        
    def _setup_sim_grid_ui(self):
        sim_grid_params_group = QGroupBox("Parametri Simulazione e Griglia")
        sim_grid_params_layout = QFormLayout()
        self.tb_velocita_suono = QLineEdit(str(DEFAULT_SIM_SPEED_OF_SOUND))
        sim_grid_params_layout.addRow("Velocità Suono (m/s):", self.tb_velocita_suono)
        self.tb_grid_res_spl = QLineEdit("0.1")
        sim_grid_params_layout.addRow("Risoluzione Mappa SPL (m):", self.tb_grid_res_spl)
        self.tb_grid_snap_spacing = QLineEdit(str(self.grid_snap_spacing))
        self.tb_grid_snap_spacing.editingFinished.connect(self.update_grid_snap_params)
        sim_grid_params_layout.addRow("Passo Griglia Snap (m):", self.tb_grid_snap_spacing)
        self.check_grid_snap_enabled = QCheckBox("Abilita Snap Oggetti")
        self.check_grid_snap_enabled.setChecked(self.grid_snap_enabled)
        self.check_grid_snap_enabled.stateChanged.connect(self.update_grid_snap_params)
        sim_grid_params_layout.addRow(self.check_grid_snap_enabled)
        self.check_show_grid = QCheckBox("Mostra Griglia")
        self.check_show_grid.setChecked(self.grid_show_enabled)
        self.check_show_grid.stateChanged.connect(self.update_grid_snap_params)
        sim_grid_params_layout.addRow(self.check_show_grid)
        self.error_text_grid_params = QLabel("")
        self.error_text_grid_params.setStyleSheet("color: red;")
        sim_grid_params_layout.addRow(self.error_text_grid_params)
        sim_grid_params_group.setLayout(sim_grid_params_layout)
        self.controls_layout.addWidget(sim_grid_params_group)

    def _setup_optimization_ui(self):
        optim_group = QGroupBox("Ottimizzazione Automatica")
        optim_main_layout = QVBoxLayout()
        self.radio_btn_group_crit = QButtonGroup(self)
        crit_layout = QHBoxLayout()
        self.radio_copertura = QRadioButton("Copertura SPL")
        self.radio_copertura.setChecked(True)
        self.radio_copertura.toggled.connect(lambda: self.update_optim_freq_fields_visibility("Copertura SPL"))
        crit_layout.addWidget(self.radio_copertura)
        self.radio_omogeneita = QRadioButton("Omogeneità SPL")
        self.radio_omogeneita.toggled.connect(lambda: self.update_optim_freq_fields_visibility("Omogeneità SPL"))
        crit_layout.addWidget(self.radio_omogeneita)
        self.radio_btn_group_crit.addButton(self.radio_copertura)
        self.radio_btn_group_crit.addButton(self.radio_omogeneita)
        optim_main_layout.addLayout(crit_layout)
        optim_freq_layout = QFormLayout()
        self.label_opt_freq_single_widget = QLabel("Freq. Ottim. (Hz):")
        self.tb_opt_freq_single = QLineEdit("80")
        optim_freq_layout.addRow(self.label_opt_freq_single_widget, self.tb_opt_freq_single)
        self.label_opt_freq_min_widget = QLabel("Freq. Min (Hz):")
        self.tb_opt_freq_min = QLineEdit("40")
        optim_freq_layout.addRow(self.label_opt_freq_min_widget, self.tb_opt_freq_min)
        self.label_opt_freq_max_widget = QLabel("Freq. Max (Hz):")
        self.tb_opt_freq_max = QLineEdit("120")
        optim_freq_layout.addRow(self.label_opt_freq_max_widget, self.tb_opt_freq_max)
        self.label_opt_n_freq_widget = QLabel("Nr. Punti Freq.:")
        self.tb_opt_n_freq = QLineEdit("10")
        optim_freq_layout.addRow(self.label_opt_n_freq_widget, self.tb_opt_n_freq)
        optim_main_layout.addLayout(optim_freq_layout)
        self.error_text_optim_freq = QLabel("")
        self.error_text_optim_freq.setStyleSheet("color: red;")
        optim_main_layout.addWidget(self.error_text_optim_freq)
        optim_algo_layout = QFormLayout()
        self.tb_opt_pop_size = QLineEdit("50")
        optim_algo_layout.addRow("Config. Testate:", self.tb_opt_pop_size)
        self.tb_opt_generations = QLineEdit("30")
        optim_algo_layout.addRow("Cicli Ottim.:", self.tb_opt_generations)
        
        self.tb_target_min_spl_desired = QLineEdit(str(self.target_min_spl_desired_ui_val))
        optim_algo_layout.addRow("Min SPL Target Desiderato (dB):", self.tb_target_min_spl_desired)
        
        self.tb_max_spl_avoid = QLineEdit(str(self.max_spl_avoidance_ui_val))
        optim_algo_layout.addRow("Max SPL Evit. (dB):", self.tb_max_spl_avoid)
        
        self.label_balance_slider = QLabel("Bilanciamento Target / Evitamento:")
        optim_algo_layout.addRow(self.label_balance_slider)
        self.slider_balance = QSlider(Qt.Orientation.Horizontal)
        self.slider_balance.setMinimum(0)
        self.slider_balance.setMaximum(100)
        self.slider_balance.setValue(self.balance_slider_ui_val)
        self.label_balance_value = QLabel(f"{self.slider_balance.value()}% Target")
        self.slider_balance.valueChanged.connect(lambda val: self.label_balance_value.setText(f"{val}% Target"))
        optim_algo_layout.addRow(self.slider_balance)
        optim_algo_layout.addRow(self.label_balance_value)

        optim_main_layout.addLayout(optim_algo_layout)
        self.error_text_optim_params = QLabel("")
        self.error_text_optim_params.setStyleSheet("color: red;")
        optim_main_layout.addWidget(self.error_text_optim_params)
        optim_buttons_layout_H1 = QHBoxLayout()
        self.btn_optimize_widget = QPushButton("Avvia Ottimizzazione DSP")
        self.btn_optimize_widget.clicked.connect(self.avvia_ottimizzazione_ui_qt)
        optim_buttons_layout_H1.addWidget(self.btn_optimize_widget)
        self.btn_stop_optimize_widget = QPushButton("Ferma")
        self.btn_stop_optimize_widget.clicked.connect(self.stop_ottimizzazione_ui_qt)
        self.btn_stop_optimize_widget.setEnabled(False)
        optim_buttons_layout_H1.addWidget(self.btn_stop_optimize_widget)
        optim_main_layout.addLayout(optim_buttons_layout_H1)
        self.btn_unlock_dsp_params = QPushButton("Sblocca DSP per Ottim.")
        self.btn_unlock_dsp_params.clicked.connect(self.unlock_dsp_for_optimization)
        optim_main_layout.addWidget(self.btn_unlock_dsp_params)
        self.status_text_optim = QLabel("Pronto.")
        self.status_text_optim.setWordWrap(True)
        optim_main_layout.addWidget(self.status_text_optim)
        optim_group.setLayout(optim_main_layout)
        self.controls_layout.addWidget(optim_group)

